{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/health-app/src/pages/dashboard/bar-chart.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { startOfMonth, format } from \"date-fns\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Bar } from 'react-chartjs-2';\nimport './dashboard.css';\nimport { setDateBar, setNutBar } from '../../store/redux_action';\nimport { Chart as ChartJS, RadialLinearScale, PointElement, CategoryScale, LineElement, BarElement, LinearScale, Title, Tooltip, Legend, Filler } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(RadialLinearScale, PointElement, LineElement, BarElement, CategoryScale, LinearScale, Title, Tooltip, Legend, Filler);\n;\nconst Barchart = () => {\n  _s();\n  const dispatch = useDispatch();\n  const selectNut_bar = useSelector(state => state.nut_bar);\n  const selectDate_bar = useSelector(state => state.date_bar);\n  const sumnutrition = useSelector(state => state.sum_nut);\n  const nutritionItems = useSelector(state => state.nutrition);\n  const [barData, setBarData] = useState({\n    labels: [],\n    datasets: [{\n      label: '',\n      data: [],\n      borderColor: '',\n      backgroundColor: ''\n    }]\n  });\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top'\n      },\n      title: {\n        display: true,\n        text: 'カロリー摂取量の統計'\n      }\n    },\n    scales: {\n      x: {\n        stacked: false,\n        categoryPercentage: 0.6,\n        // 棒グラフの幅\n        barPercentage: 0.8 // 棒グラフの間隔\n      },\n      y: {\n        beginAtZero: true\n      }\n    }\n  };\n  useEffect(() => {\n    /*const getinitialItems = () => {\n      if (selectDate_bar) {\n        const startDate = new Date(selectDate_bar.date_bar);\n        startDate.setDate(1);  \n        const endDate = new Date(startDate.getFullYear(), startDate.getMonth() + 1, 0); \n    \n        const daysInMonth = endDate.getDate();\n        const weeksInMonth: number[][] = [];\n    \n        let currentWeek: number[] = [];\n        \n        for (let day = 1; day <= daysInMonth; day++) {\n          const currentDate = new Date(startDate.getFullYear(), startDate.getMonth(), day);\n          const dayOfWeek = currentDate.getDay();  \n               currentWeek.push(0);\n          if (dayOfWeek === 6 || day === daysInMonth) {\n            weeksInMonth.push(currentWeek);\n            currentWeek = [];\n          }\n        }\n        return weeksInMonth;\n      }\n      return [];\n    };*/\n    const getFilteredItems = () => {\n      return sumnutrition.filter(item => {\n        const startDate = new Date(selectDate_bar.date_bar);\n        startDate.setDate(1);\n        const endDate = new Date(startDate.getFullYear(), startDate.getMonth() + 1, 0);\n        const itemDate = new Date(item.date);\n        return itemDate >= startDate && itemDate <= endDate;\n      });\n    };\n    const getmatchItems = () => {\n      const year = new Date(selectDate_bar.date_bar).getFullYear();\n      const month = new Date(selectDate_bar.date_bar).getMonth() + 1;\n      filteredItems.forEach(item => {\n        let day = new Date(item.date).getDate();\n        const firstDayOfMonth = startOfMonth(new Date(year, month - 1));\n        const weekday = format(firstDayOfMonth, 'EEEE'); //選択された月の初日が何曜日か(\"Sunday\"など)で出力\n        let vertical = Math.floor(day % 7);\n        let horizontal = Math.floor(day / 7);\n        switch (weekday) {\n          case \"Sunday\":\n            {\n              if (vertical === 0) {\n                vertical = 7;\n                horizontal -= 1;\n              }\n              if (selectNut_bar.nut_bar === 'calories') {\n                allItems[vertical - 1][horizontal] = item.calories / 100;\n              } else if (selectNut_bar.nut_bar === 'protein') {\n                allItems[vertical - 1][horizontal] = item.protein / 100;\n              } else if (selectNut_bar.nut_bar === 'fat') {\n                allItems[vertical - 1][horizontal] = item.fat / 100;\n              }\n              break;\n            }\n          case \"Monday\":\n            {\n              if (selectNut_bar.nut_bar === 'calories') {\n                allItems[vertical][horizontal] = item.calories / 100;\n              } else if (selectNut_bar.nut_bar === 'protein') {\n                allItems[vertical][horizontal] = item.protein / 100;\n              } else if (selectNut_bar.nut_bar === 'fat') {\n                allItems[vertical][horizontal] = item.fat / 100;\n              }\n              break;\n            }\n          case \"Tuesday\":\n            {\n              if (vertical = 6) {\n                vertical -= 7;\n                horizontal += 1;\n              }\n              if (selectNut_bar.nut_bar === 'calories') {\n                allItems[vertical + 1][horizontal] = item.calories / 100;\n              } else if (selectNut_bar.nut_bar === 'protein') {\n                allItems[vertical + 1][horizontal] = item.protein / 100;\n              } else if (selectNut_bar.nut_bar === 'fat') {\n                allItems[vertical + 1][horizontal] = item.fat / 100;\n              }\n              break;\n            }\n          case \"Wednesday\":\n            {\n              if (vertical >= 5) {\n                vertical -= 7;\n                horizontal += 1;\n              }\n              if (selectNut_bar.nut_bar === 'calories') {\n                allItems[vertical + 2][horizontal] = item.calories / 100;\n              } else if (selectNut_bar.nut_bar === 'protein') {\n                allItems[vertical + 2][horizontal] = item.protein / 100;\n              } else if (selectNut_bar.nut_bar === 'fat') {\n                allItems[vertical + 2][horizontal] = item.fat / 100;\n              }\n              break;\n            }\n          case \"Thursday\":\n            {\n              if (vertical >= 4) {\n                vertical -= 7;\n                horizontal += 1;\n              }\n              if (selectNut_bar.nut_bar === 'calories') {\n                allItems[vertical + 3][horizontal] = item.calories / 100;\n              } else if (selectNut_bar.nut_bar === 'protein') {\n                allItems[vertical + 3][horizontal] = item.protein / 100;\n              } else if (selectNut_bar.nut_bar === 'fat') {\n                allItems[vertical + 3][horizontal] = item.fat / 100;\n              }\n              break;\n            }\n          case \"Friday\":\n            {\n              if (vertical >= 3) {\n                vertical -= 7;\n                horizontal += 1;\n              }\n              if (selectNut_bar.nut_bar === 'calories') {\n                allItems[vertical + 4][horizontal] = item.calories / 100;\n              } else if (selectNut_bar.nut_bar === 'protein') {\n                allItems[vertical + 4][horizontal] = item.protein / 100;\n              } else if (selectNut_bar.nut_bar === 'fat') {\n                allItems[vertical + 4][horizontal] = item.fat / 100;\n              }\n              break;\n            }\n          case \"Saturday\":\n            {\n              if (vertical >= 2) {\n                vertical -= 7;\n                horizontal += 1;\n              }\n              if (selectNut_bar.nut_bar === 'calories') {\n                allItems[vertical + 5][horizontal] = item.calories / 100;\n              } else if (selectNut_bar.nut_bar === 'protein') {\n                allItems[vertical + 5][horizontal] = item.protein / 100;\n              } else if (selectNut_bar.nut_bar === 'fat') {\n                allItems[vertical + 5][horizontal] = item.fat / 100;\n              }\n              break;\n            }\n          default:\n            break;\n        }\n      });\n\n      /*filteredItems.forEach(item => {\n        const itemDate = new Date(format(item.date, \"yyyy/MM/dd\"));         \n        const weekNumber = Math.floor((itemDate.getDate() - 1) / 7);           \n        const dayOfWeek = itemDate.getDay();  \n      \n        \n        if (initialItems[weekNumber] && initialItems[weekNumber][dayOfWeek] !== undefined) {\n          initialItems[weekNumber][dayOfWeek] = item.calories/100;\n          return initialItems\n        }\n      });*/\n    };\n    const getWeekOfMonth = date => {\n      const firstDayOfMonth = new Date(date.getFullYear(), date.getMonth(), 1);\n      const dayOfMonth = date.getDate();\n      const adjustedDate = dayOfMonth + firstDayOfMonth.getDay();\n      return Math.ceil(adjustedDate / 7);\n    };\n    let initialItems1 = [0, 0, 0, 0, 0];\n    let initialItems2 = [0, 0, 0, 0, 0];\n    let initialItems3 = [0, 0, 0, 0, 0];\n    let initialItems4 = [0, 0, 0, 0, 0];\n    let initialItems5 = [0, 0, 0, 0, 0];\n    let initialItems6 = [0, 0, 0, 0, 0];\n    let initialItems7 = [0, 0, 0, 0, 0];\n    let allItems = [initialItems1, initialItems2, initialItems3, initialItems4, initialItems5, initialItems6, initialItems7];\n\n    /*const initialItems1 = [1,8,15,22,29]\n      const initialItems2 = [2,9,16,23,30]\n      const initialItems3 = [3,10,17,24,31]\n      const initialItems4 = [4,11,18,25,32]\n      const initialItems5 = [5,12,19,26,33]\n      const initialItems6 = [6,13,20,27,34]\n      const initialItems7 = [7,14,21,28,35]*/\n\n    const filteredItems = getFilteredItems();\n    const matching = getmatchItems();\n    const weeklyItems = {};\n    filteredItems.forEach(item => {\n      const date = new Date(item.date);\n      const weekOfMonth = getWeekOfMonth(date);\n      if (!weeklyItems[weekOfMonth]) {\n        weeklyItems[weekOfMonth] = [];\n      }\n      weeklyItems[weekOfMonth].push(item.calories / 100);\n    });\n    if (selectNut_bar.nut_bar === 'calories') {\n      /*for (let weekIndex = 0; weekIndex < initialItems.length; weekIndex++) {\n        const weekData = initialItems[weekIndex];\n      \n        for (let dayIndex = 0; dayIndex < weekData.length; dayIndex++) {\n          datasets.push({\n            label: `週${weekIndex + 1} 日${dayIndex + 1}の ${selectNut_bar.nut_bar.charAt(0).toUpperCase() + selectNut_bar.nut_bar.slice(1)}`,\n            data: [weekData[dayIndex]], \n            borderColor: 'rgb(255, 99, 132)', \n            backgroundColor: 'rgba(255, 99, 132, 0.2)', \n          });\n        }\n      }*/\n      setBarData({\n        labels: [\"1週目\", \"2週目\", \"3週目\", \"4週目\", \"5週目\"],\n        datasets: [{\n          label: 'Sunday',\n          data: initialItems1.map(weekdata => {\n            const week = weekdata;\n            return week;\n          }),\n          borderColor: '',\n          backgroundColor: 'rgb(255, 0,0)'\n        }, {\n          label: 'Monday',\n          data: initialItems2.map(weekdata => {\n            const week = weekdata;\n            return week;\n          }),\n          borderColor: '',\n          backgroundColor: 'rgb(255, 187, 0)'\n        }, {\n          label: 'Tuesday',\n          data: initialItems3.map(weekdata => {\n            const week = weekdata;\n            return week;\n          }),\n          borderColor: '',\n          backgroundColor: 'rgb(255, 0,255)'\n        }, {\n          label: 'Wednesday',\n          data: initialItems4.map(weekdata => {\n            const week = weekdata;\n            return week;\n          }),\n          borderColor: '',\n          backgroundColor: 'rgb(0, 115,0)'\n        }, {\n          label: 'Thursday',\n          data: initialItems5.map(weekdata => {\n            const week = weekdata;\n            return week;\n          }),\n          borderColor: '',\n          backgroundColor: 'rgb(88, 88, 88)'\n        }, {\n          label: 'Friday',\n          data: initialItems6.map(weekdata => {\n            const week = weekdata;\n            return week;\n          }),\n          borderColor: '',\n          backgroundColor: 'rgb(131, 0, 183)'\n        }, {\n          label: 'Saturday',\n          data: initialItems7.map(weekdata => {\n            const week = weekdata;\n            return week;\n          }),\n          borderColor: '',\n          backgroundColor: 'rgb(0, 0,255)'\n        }]\n      });\n    } else if (selectNut_bar.nut_bar === 'protein') {\n      setBarData({\n        labels: [\"1週目\", \"2週目\", \"3週目\", \"4週目\", \"5週目\"],\n        datasets: [{\n          label: 'Sunday',\n          data: initialItems1.map(weekdata => {\n            const week = weekdata;\n            return week;\n          }),\n          borderColor: '',\n          backgroundColor: 'rgb(255, 0,0)'\n        }, {\n          label: 'Monday',\n          data: initialItems2.map(weekdata => {\n            const week = weekdata;\n            return week;\n          }),\n          borderColor: '',\n          backgroundColor: 'rgb(255, 187, 0)'\n        }, {\n          label: 'Tuesday',\n          data: initialItems3.map(weekdata => {\n            const week = weekdata;\n            return week;\n          }),\n          borderColor: '',\n          backgroundColor: 'rgb(255, 0,255)'\n        }, {\n          label: 'Wednesday',\n          data: initialItems4.map(weekdata => {\n            const week = weekdata;\n            return week;\n          }),\n          borderColor: '',\n          backgroundColor: 'rgb(0, 115,0)'\n        }, {\n          label: 'Thursday',\n          data: initialItems5.map(weekdata => {\n            const week = weekdata;\n            return week;\n          }),\n          borderColor: '',\n          backgroundColor: 'rgb(88, 88, 88)'\n        }, {\n          label: 'Friday',\n          data: initialItems6.map(weekdata => {\n            const week = weekdata;\n            return week;\n          }),\n          borderColor: '',\n          backgroundColor: 'rgb(131, 0, 183)'\n        }, {\n          label: 'Saturday',\n          data: initialItems7.map(weekdata => {\n            const week = weekdata;\n            return week;\n          }),\n          borderColor: '',\n          backgroundColor: 'rgb(0, 0,255)'\n        }]\n      });\n    } else if (selectNut_bar.nut_bar === 'fat') {\n      setBarData({\n        labels: [\"1週目\", \"2週目\", \"3週目\", \"4週目\", \"5週目\"],\n        datasets: [{\n          label: 'Sunday',\n          data: initialItems1.map(weekdata => {\n            const week = weekdata;\n            return week;\n          }),\n          borderColor: '',\n          backgroundColor: 'rgb(255, 0,0)'\n        }, {\n          label: 'Monday',\n          data: initialItems2.map(weekdata => {\n            const week = weekdata;\n            return week;\n          }),\n          borderColor: '',\n          backgroundColor: 'rgb(255, 187, 0)'\n        }, {\n          label: 'Tuesday',\n          data: initialItems3.map(weekdata => {\n            const week = weekdata;\n            return week;\n          }),\n          borderColor: '',\n          backgroundColor: 'rgb(255, 0,255)'\n        }, {\n          label: 'Wednesday',\n          data: initialItems4.map(weekdata => {\n            const week = weekdata;\n            return week;\n          }),\n          borderColor: '',\n          backgroundColor: 'rgb(0, 115,0)'\n        }, {\n          label: 'Thursday',\n          data: initialItems5.map(weekdata => {\n            const week = weekdata;\n            return week;\n          }),\n          borderColor: '',\n          backgroundColor: 'rgb(88, 88, 88)'\n        }, {\n          label: 'Friday',\n          data: initialItems6.map(weekdata => {\n            const week = weekdata;\n            return week;\n          }),\n          borderColor: '',\n          backgroundColor: 'rgb(131, 0, 183)'\n        }, {\n          label: 'Saturday',\n          data: initialItems7.map(weekdata => {\n            const week = weekdata;\n            return week;\n          }),\n          borderColor: '',\n          backgroundColor: 'rgb(0, 0,255)'\n        }]\n      });\n    } else {\n      setBarData({\n        labels: [\"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        datasets: [{\n          label: 'Nodata',\n          data: [0, 0, 0, 0, 0, 0, 0],\n          borderColor: '',\n          backgroundColor: ''\n        }]\n      });\n    }\n    ;\n    const options = {\n      plugins: {\n        legend: {\n          position: 'top'\n        },\n        title: {\n          display: true,\n          text: 'Radar-Chart',\n          font: {\n            size: 24\n          }\n        },\n        tooltip: {\n          callbacks: {\n            label: function (context) {\n              return context.label + ': ' + context.raw;\n            }\n          },\n          bodyFont: {\n            size: 20\n          }\n        }\n      },\n      scales: {\n        x: {\n          ticks: {\n            font: {\n              size: 14\n            }\n          }\n        },\n        y: {\n          ticks: {\n            font: {\n              size: 14\n            }\n          }\n        }\n      }\n    };\n  }, [selectDate_bar, selectNut_bar, nutritionItems]);\n  const handleMonthChange = date => {\n    if (date) {\n      dispatch(setDateBar(format(date, \"yyyy/MM/dd\")));\n    }\n  };\n  const handleSelectChange = e => {\n    dispatch(setNutBar(e.target.value));\n  };\n\n  /*const handleMonthChange = (date: Date | null) => {\n      if (date) {\n        //dispatch(setDateBar(format(date, \"yyyy/MM/dd\")));\n      }\n    };*/\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"input-chart\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inputs\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-back\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dash-date\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"dashdate\",\n            children: \"\\u6708\\uFF1A\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 602,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n            selected: new Date(selectDate_bar.date_bar),\n            onChange: handleMonthChange,\n            dateFormat: \"yyyy/MM/dd\",\n            className: \"select-kind\",\n            showMonthYearPicker: true,\n            showFullMonthYearPicker: true,\n            placeholderText: \"Select a month\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 603,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 601,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dash-nutri\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"dashnutri\",\n            children: \"\\u6804\\u990A\\uFF1A\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 614,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"select-kind\",\n            onChange: handleSelectChange,\n            value: selectNut_bar.nut_bar,\n            children: [selectNut_bar.nut_bar === '' && /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"\\u9078\\u629E\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 616,\n              columnNumber: 54\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"calories\",\n              children: \"calorie\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 617,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"protein\",\n              children: \"protein\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 618,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"fat\",\n              children: \"fat\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 619,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 615,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 613,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 600,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 599,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"radar-chart\",\n      children: /*#__PURE__*/_jsxDEV(Bar, {\n        data: barData,\n        options: options,\n        className: \"radarchart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 625,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 624,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 598,\n    columnNumber: 7\n  }, this);\n};\n_s(Barchart, \"7S2NW3PiXb3zBWPP2s6Qevq2sq0=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector];\n});\n_c = Barchart;\nexport default Barchart;\nvar _c;\n$RefreshReg$(_c, \"Barchart\");","map":{"version":3,"names":["React","useEffect","useState","DatePicker","startOfMonth","format","useDispatch","useSelector","Bar","setDateBar","setNutBar","Chart","ChartJS","RadialLinearScale","PointElement","CategoryScale","LineElement","BarElement","LinearScale","Title","Tooltip","Legend","Filler","jsxDEV","_jsxDEV","register","Barchart","_s","dispatch","selectNut_bar","state","nut_bar","selectDate_bar","date_bar","sumnutrition","sum_nut","nutritionItems","nutrition","barData","setBarData","labels","datasets","label","data","borderColor","backgroundColor","options","responsive","plugins","legend","position","title","display","text","scales","x","stacked","categoryPercentage","barPercentage","y","beginAtZero","getFilteredItems","filter","item","startDate","Date","setDate","endDate","getFullYear","getMonth","itemDate","date","getmatchItems","year","month","filteredItems","forEach","day","getDate","firstDayOfMonth","weekday","vertical","Math","floor","horizontal","allItems","calories","protein","fat","getWeekOfMonth","dayOfMonth","adjustedDate","getDay","ceil","initialItems1","initialItems2","initialItems3","initialItems4","initialItems5","initialItems6","initialItems7","matching","weeklyItems","weekOfMonth","push","map","weekdata","week","font","size","tooltip","callbacks","context","raw","bodyFont","ticks","handleMonthChange","handleSelectChange","e","target","value","className","children","fileName","_jsxFileName","lineNumber","columnNumber","selected","onChange","dateFormat","showMonthYearPicker","showFullMonthYearPicker","placeholderText","_c","$RefreshReg$"],"sources":["/usr/src/app/health-app/src/pages/dashboard/bar-chart.tsx"],"sourcesContent":["import React, { useEffect,useState,useMemo } from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { startOfMonth,format } from \"date-fns\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppState } from '../../store/redux_store';\nimport { Radar, Line, Bar } from 'react-chartjs-2';\nimport MainLayout from '../mainlayout';\nimport './dashboard.css'\nimport { setDateLine, setDateRadar , setNutLine, setNutRadar, setWeekLine, setDateBar,setNutBar} from '../../store/redux_action';\nimport {store} from '../../store/redux_store';\nimport {\n  Chart as ChartJS,\n  RadialLinearScale,\n  PointElement,\n  CategoryScale,\n  LineElement,\n  BarElement,\n  LinearScale,\n  Title,\n  Tooltip,\n  Legend,\n  Filler,\n  TooltipItem, \n  TooltipModel \n} from 'chart.js';\n\nChartJS.register(\n  RadialLinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  CategoryScale,\n  LinearScale, \n  Title,\n  Tooltip,\n  Legend,\n  Filler\n);\ninterface BarChartData {\n  labels: string[];\n    datasets: {\n        label: string;\n        data: number[];\n        borderColor: string;\n        backgroundColor: string;\n    }[];\n  };\n\n\nconst Barchart = () => {\n    const dispatch = useDispatch();\n    const selectNut_bar = useSelector((state: AppState) => state.nut_bar);\n    const selectDate_bar = useSelector((state: AppState) => state.date_bar);\n    const sumnutrition = useSelector((state: AppState) => state.sum_nut);\n    const nutritionItems = useSelector((state: AppState) => state.nutrition);\n\n\n    const [barData, setBarData] = useState<BarChartData>({\n      labels: [],\n      datasets: [\n        {\n          label: '',\n          data: [],\n          borderColor: '',\n          backgroundColor: '',\n        },\n      ],\n    });\n    \n      const options = {\n        responsive: true,\n        plugins: {\n        legend: {\n            position: 'top' as const,\n        },\n        title: {\n            display: true,\n            text: 'カロリー摂取量の統計',\n        },\n        },\n        scales: {\n        x: {\n            stacked: false,\n            categoryPercentage: 0.6, // 棒グラフの幅\n            barPercentage: 0.8, // 棒グラフの間隔\n        },\n        y: {\n            beginAtZero: true,\n        },\n        },\n    };\n\n    useEffect(() => {\n      /*const getinitialItems = () => {\n        if (selectDate_bar) {\n          const startDate = new Date(selectDate_bar.date_bar);\n          startDate.setDate(1);  \n          const endDate = new Date(startDate.getFullYear(), startDate.getMonth() + 1, 0); \n      \n          const daysInMonth = endDate.getDate();\n          const weeksInMonth: number[][] = [];\n      \n          let currentWeek: number[] = [];\n          \n          for (let day = 1; day <= daysInMonth; day++) {\n            const currentDate = new Date(startDate.getFullYear(), startDate.getMonth(), day);\n            const dayOfWeek = currentDate.getDay();  \n    \n            currentWeek.push(0);\n            if (dayOfWeek === 6 || day === daysInMonth) {\n              weeksInMonth.push(currentWeek);\n              currentWeek = [];\n            }\n          }\n          return weeksInMonth;\n        }\n        return [];\n      };*/\n      const getFilteredItems = () => {\n        return sumnutrition.filter(item => {\n          const startDate = new Date(selectDate_bar.date_bar);\n          startDate.setDate(1);  \n          const endDate = new Date(startDate.getFullYear(), startDate.getMonth() + 1, 0); \n          const itemDate = new Date(item.date);\n          return itemDate >= startDate && itemDate <= endDate;\n        });\n      }\n        const getmatchItems = () => {\n          const year = new Date(selectDate_bar.date_bar).getFullYear();\n          const month =new Date(selectDate_bar.date_bar).getMonth()+1;\n          filteredItems.forEach(item => {       \n          let day = new Date(item.date).getDate();\n\n          const firstDayOfMonth = startOfMonth(new Date(year, month - 1)); \n          const weekday = format(firstDayOfMonth, 'EEEE');//選択された月の初日が何曜日か(\"Sunday\"など)で出力\n          let vertical = Math.floor(day % 7)\n          let horizontal = Math.floor(day / 7)\n \n\n          switch(weekday){\n            case(\"Sunday\"):{\n              if (vertical === 0){\n                vertical = 7\n                horizontal -= 1\n              }\n              if(selectNut_bar.nut_bar === 'calories'){\n                allItems[vertical-1][horizontal]= item.calories/100\n              }else if (selectNut_bar.nut_bar === 'protein'){\n                allItems[vertical-1][horizontal]= item.protein/100\n              }else if(selectNut_bar.nut_bar === 'fat'){\n                allItems[vertical-1][horizontal]= item.fat/100\n              }\n              break\n            }\n            case(\"Monday\"):{\n              if(selectNut_bar.nut_bar === 'calories'){\n                allItems[vertical][horizontal]= item.calories/100\n              }else if (selectNut_bar.nut_bar === 'protein'){\n                allItems[vertical][horizontal]= item.protein/100\n              }else if(selectNut_bar.nut_bar === 'fat'){\n                allItems[vertical][horizontal]= item.fat/100\n              }\n              break\n            }\n            case(\"Tuesday\"):{\n              if(vertical=6){\n                vertical -= 7\n                horizontal += 1\n              }\n              if(selectNut_bar.nut_bar === 'calories'){\n                allItems[vertical+1][horizontal]= item.calories/100\n              }else if (selectNut_bar.nut_bar === 'protein'){\n                allItems[vertical+1][horizontal]= item.protein/100\n              }else if(selectNut_bar.nut_bar === 'fat'){\n                allItems[vertical+1][horizontal]= item.fat/100\n              }\n              break\n            }\n            case(\"Wednesday\"):{\n              if(vertical>=5){\n                vertical -= 7\n                horizontal += 1\n              }\n              if(selectNut_bar.nut_bar === 'calories'){\n                allItems[vertical+2][horizontal]= item.calories/100\n              }else if (selectNut_bar.nut_bar === 'protein'){\n                allItems[vertical+2][horizontal]= item.protein/100\n              }else if(selectNut_bar.nut_bar === 'fat'){\n                allItems[vertical+2][horizontal]= item.fat/100\n              }\n              break\n            }\n            case(\"Thursday\"):{\n              if(vertical>=4){\n                vertical -= 7\n                horizontal += 1\n              }\n              if(selectNut_bar.nut_bar === 'calories'){\n                allItems[vertical+3][horizontal]= item.calories/100\n              }else if (selectNut_bar.nut_bar === 'protein'){\n                allItems[vertical+3][horizontal]= item.protein/100\n              }else if(selectNut_bar.nut_bar === 'fat'){\n                allItems[vertical+3][horizontal]= item.fat/100\n              }\n              break\n            }\n            case(\"Friday\"):{\n              if(vertical>=3){\n                vertical -= 7\n                horizontal += 1\n              }\n              if(selectNut_bar.nut_bar === 'calories'){\n                allItems[vertical+4][horizontal]= item.calories/100\n              }else if (selectNut_bar.nut_bar === 'protein'){\n                allItems[vertical+4][horizontal]= item.protein/100\n              }else if(selectNut_bar.nut_bar === 'fat'){\n                allItems[vertical+4][horizontal]= item.fat/100\n              }\n              break\n            }\n            case(\"Saturday\"):{\n              if(vertical>=2){\n                vertical -= 7\n                horizontal += 1\n              }\n              if(selectNut_bar.nut_bar === 'calories'){\n                allItems[vertical+5][horizontal]= item.calories/100\n              }else if (selectNut_bar.nut_bar === 'protein'){\n                allItems[vertical+5][horizontal]= item.protein/100\n              }else if(selectNut_bar.nut_bar === 'fat'){\n                allItems[vertical+5][horizontal]= item.fat/100\n              }\n              break\n            }\n            default:\n              break\n          }\n        })\n\n        /*filteredItems.forEach(item => {\n          const itemDate = new Date(format(item.date, \"yyyy/MM/dd\"));         \n          const weekNumber = Math.floor((itemDate.getDate() - 1) / 7);           \n          const dayOfWeek = itemDate.getDay();  \n        \n          \n          if (initialItems[weekNumber] && initialItems[weekNumber][dayOfWeek] !== undefined) {\n            initialItems[weekNumber][dayOfWeek] = item.calories/100;\n            return initialItems\n          }\n        });*/\n      }\n\n      const getWeekOfMonth = (date: Date): number => {\n        const firstDayOfMonth = new Date(date.getFullYear(), date.getMonth(), 1);\n        const dayOfMonth = date.getDate();\n        const adjustedDate = dayOfMonth + firstDayOfMonth.getDay(); \n        return Math.ceil(adjustedDate / 7); \n      };\n\n      let initialItems1 = [0,0,0,0,0]\n      let initialItems2 = [0,0,0,0,0]\n      let initialItems3 = [0,0,0,0,0]\n      let initialItems4 = [0,0,0,0,0]\n      let initialItems5 = [0,0,0,0,0]\n      let initialItems6 = [0,0,0,0,0]\n      let initialItems7 = [0,0,0,0,0]\n\n      let allItems = [initialItems1,initialItems2,initialItems3,initialItems4,initialItems5,initialItems6,initialItems7]\n\n    /*const initialItems1 = [1,8,15,22,29]\n      const initialItems2 = [2,9,16,23,30]\n      const initialItems3 = [3,10,17,24,31]\n      const initialItems4 = [4,11,18,25,32]\n      const initialItems5 = [5,12,19,26,33]\n      const initialItems6 = [6,13,20,27,34]\n      const initialItems7 = [7,14,21,28,35]*/\n\n      const filteredItems = getFilteredItems();\n      const matching = getmatchItems();\n      \n        \n      const weeklyItems: { [key: number]: any[] } = {}; \n\n      filteredItems.forEach((item: any) => {\n        const date = new Date(item.date);\n        const weekOfMonth = getWeekOfMonth(date); \n        \n        if (!weeklyItems[weekOfMonth]) {\n          weeklyItems[weekOfMonth] = []; \n        }      \n        weeklyItems[weekOfMonth].push(item.calories/100); \n\n      }\n      );\n\n        if(selectNut_bar.nut_bar === 'calories'){\n          /*for (let weekIndex = 0; weekIndex < initialItems.length; weekIndex++) {\n            const weekData = initialItems[weekIndex];\n          \n            for (let dayIndex = 0; dayIndex < weekData.length; dayIndex++) {\n              datasets.push({\n                label: `週${weekIndex + 1} 日${dayIndex + 1}の ${selectNut_bar.nut_bar.charAt(0).toUpperCase() + selectNut_bar.nut_bar.slice(1)}`,\n                data: [weekData[dayIndex]], \n                borderColor: 'rgb(255, 99, 132)', \n                backgroundColor: 'rgba(255, 99, 132, 0.2)', \n              });\n            }\n          }*/\n          setBarData({\n            labels: [\"1週目\", \"2週目\", \"3週目\", \"4週目\", \"5週目\"],\n            datasets: [\n              {\n                label: 'Sunday',\n                data: initialItems1.map((weekdata) =>{\n                  const week = weekdata\n              \n                  return week;\n                }),\n                borderColor: '',\n                backgroundColor: 'rgb(255, 0,0)',\n              },\n              {\n                label: 'Monday',\n                data: initialItems2.map((weekdata) =>{\n                  const week = weekdata\n                  return week;\n                }),\n                borderColor: '',\n                backgroundColor: 'rgb(255, 187, 0)',\n              },\n              {\n                label: 'Tuesday',\n                data: initialItems3.map((weekdata) =>{\n                  const week = weekdata\n                  return week;\n                }),\n                borderColor: '',\n                backgroundColor: 'rgb(255, 0,255)',\n              },\n              {\n                label: 'Wednesday',\n                data: initialItems4.map((weekdata) =>{\n                  const week = weekdata\n                  return week;\n                }),\n                borderColor: '',\n                backgroundColor: 'rgb(0, 115,0)',\n              },\n              {\n                label: 'Thursday',\n                data: initialItems5.map((weekdata) =>{\n                  const week = weekdata\n                  return week;\n                }),\n                borderColor: '',\n                backgroundColor: 'rgb(88, 88, 88)',\n              },\n              {\n                label: 'Friday',\n                data: initialItems6.map((weekdata) =>{\n                  const week = weekdata\n                  return week;\n                }),\n                borderColor: '',\n                backgroundColor: 'rgb(131, 0, 183)',\n              },\n              {\n                label: 'Saturday',\n                data: initialItems7.map((weekdata) =>{\n                  const week = weekdata\n                  return week;\n                }),\n                borderColor: '',\n                backgroundColor: 'rgb(0, 0,255)',\n              },\n              \n            ],\n          });\n      }else if(selectNut_bar.nut_bar === 'protein'){\n        setBarData({\n          labels: [\"1週目\", \"2週目\", \"3週目\", \"4週目\", \"5週目\"],\n          datasets: [\n            {\n              label: 'Sunday',\n              data: initialItems1.map((weekdata) =>{\n                const week = weekdata\n            \n                return week;\n              }),\n              borderColor: '',\n              backgroundColor: 'rgb(255, 0,0)',\n            },\n            {\n              label: 'Monday',\n              data: initialItems2.map((weekdata) =>{\n                const week = weekdata\n                return week;\n              }),\n              borderColor: '',\n              backgroundColor: 'rgb(255, 187, 0)',\n            },\n            {\n              label: 'Tuesday',\n              data: initialItems3.map((weekdata) =>{\n                const week = weekdata\n                return week;\n              }),\n              borderColor: '',\n              backgroundColor: 'rgb(255, 0,255)',\n            },\n            {\n              label: 'Wednesday',\n              data: initialItems4.map((weekdata) =>{\n                const week = weekdata\n                return week;\n              }),\n              borderColor: '',\n              backgroundColor: 'rgb(0, 115,0)',\n            },\n            {\n              label: 'Thursday',\n              data: initialItems5.map((weekdata) =>{\n                const week = weekdata\n                return week;\n              }),\n              borderColor: '',\n              backgroundColor: 'rgb(88, 88, 88)',\n            },\n            {\n              label: 'Friday',\n              data: initialItems6.map((weekdata) =>{\n                const week = weekdata\n                return week;\n              }),\n              borderColor: '',\n              backgroundColor: 'rgb(131, 0, 183)',\n            },\n            {\n              label: 'Saturday',\n              data: initialItems7.map((weekdata) =>{\n                const week = weekdata\n                return week;\n              }),\n              borderColor: '',\n              backgroundColor: 'rgb(0, 0,255)',\n            },\n            \n          ],\n        });\n      }else if(selectNut_bar.nut_bar === 'fat'){\n        setBarData({\n          labels: [\"1週目\", \"2週目\", \"3週目\", \"4週目\", \"5週目\"],\n          datasets: [\n            {\n              label: 'Sunday',\n              data: initialItems1.map((weekdata) =>{\n                const week = weekdata\n            \n                return week;\n              }),\n              borderColor: '',\n              backgroundColor: 'rgb(255, 0,0)',\n            },\n            {\n              label: 'Monday',\n              data: initialItems2.map((weekdata) =>{\n                const week = weekdata\n                return week;\n              }),\n              borderColor: '',\n              backgroundColor: 'rgb(255, 187, 0)',\n            },\n            {\n              label: 'Tuesday',\n              data: initialItems3.map((weekdata) =>{\n                const week = weekdata\n                return week;\n              }),\n              borderColor: '',\n              backgroundColor: 'rgb(255, 0,255)',\n            },\n            {\n              label: 'Wednesday',\n              data: initialItems4.map((weekdata) =>{\n                const week = weekdata\n                return week;\n              }),\n              borderColor: '',\n              backgroundColor: 'rgb(0, 115,0)',\n            },\n            {\n              label: 'Thursday',\n              data: initialItems5.map((weekdata) =>{\n                const week = weekdata\n                return week;\n              }),\n              borderColor: '',\n              backgroundColor: 'rgb(88, 88, 88)',\n            },\n            {\n              label: 'Friday',\n              data: initialItems6.map((weekdata) =>{\n                const week = weekdata\n                return week;\n              }),\n              borderColor: '',\n              backgroundColor: 'rgb(131, 0, 183)',\n            },\n            {\n              label: 'Saturday',\n              data: initialItems7.map((weekdata) =>{\n                const week = weekdata\n                return week;\n              }),\n              borderColor: '',\n              backgroundColor: 'rgb(0, 0,255)',\n            },\n            \n          ],\n        });\n      }else{\n        setBarData({\n          labels:[\"\",\"\",\"\",\"\",\"\",\"\",\"\"],\n          datasets: [\n                {\n                  label: 'Nodata',\n                  data: [0,0,0,0,0,0,0],\n                  borderColor: '',\n                  backgroundColor: '',\n                },\n          ]\n        });\n      };\n\n  \n      const options = ({\n        plugins: {\n          legend: {\n            position: 'top' as const\n          },\n          title: {\n            display: true,\n            text: 'Radar-Chart',\n            font: {\n              size: 24, \n            },\n          },\n          tooltip: {\n            callbacks: {\n              label: function (context: TooltipItem<'radar'>) {\n                return context.label + ': ' + context.raw;\n              },\n            },\n            bodyFont: {\n              size: 20, \n            },\n          },\n        },\n        scales: {\n          x: {\n            ticks: {\n              font: {\n                size: 14,\n              },\n            },\n          },\n          y: {\n            ticks: {\n              font: {\n                size: 14,\n              },\n            },\n          },\n  \n        },\n        \n        \n      });\n    }, [selectDate_bar,selectNut_bar, nutritionItems]);\n  \n      \n    const handleMonthChange = (date: Date | null) => {\n        if (date) {\n          dispatch(setDateBar(format(date, \"yyyy/MM/dd\")));\n        }\n      };\n    const handleSelectChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n        dispatch(setNutBar(e.target.value));\n      };\n\n    /*const handleMonthChange = (date: Date | null) => {\n        if (date) {\n          //dispatch(setDateBar(format(date, \"yyyy/MM/dd\")));\n        }\n      };*/\n    return (\n      <div className=\"input-chart\">\n        <div className=\"inputs\">\n          <div className='input-back'>\n            <div className='dash-date'>\n              <label className='dashdate'>月：</label>\n                <DatePicker\n                selected={new Date(selectDate_bar.date_bar)}\n                onChange={handleMonthChange}\n                dateFormat=\"yyyy/MM/dd\"\n                className=\"select-kind\"\n                showMonthYearPicker\n                showFullMonthYearPicker\n                placeholderText=\"Select a month\"\n                />\n                </div>\n              <div className='dash-nutri'>\n                  <label className='dashnutri'>栄養：</label>\n                  <select  className='select-kind' onChange={handleSelectChange} value={selectNut_bar.nut_bar}>\n                    {selectNut_bar.nut_bar === '' && <option value=\"\">選択してください</option>}\n                    <option value=\"calories\">calorie</option>\n                    <option value=\"protein\">protein</option>\n                    <option value=\"fat\">fat</option>\n                  </select>\n              </div> \n              </div>\n              </div>\n        <div className='radar-chart'>\n            <Bar data={barData} options={options} className=\"radarchart\"/>\n        </div>\n    </div>\n    );\n};\n\nexport default Barchart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}