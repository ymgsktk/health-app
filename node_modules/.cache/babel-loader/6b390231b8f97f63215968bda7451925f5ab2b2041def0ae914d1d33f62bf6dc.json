{"ast":null,"code":"import axios, { AxiosError } from 'axios';\n\n// DjangoのログインAPIエンドポイントを指定\nconst LOGIN_URL = 'http://localhost:8000/api/login/'; // DjangoのAPIエンドポイント\n\nexport const login = async (email, password) => {\n  try {\n    const response = await axios.post(LOGIN_URL, {\n      username: email,\n      password: password\n    });\n\n    // 成功時の処理\n    return {\n      token: response.data.token,\n      // 例：トークンが返される場合\n      message: 'ログイン成功'\n    };\n  } catch (error) {\n    if (error instanceof AxiosError) {\n      var _error$response, _error$response$data;\n      const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || 'ログイン失敗';\n      console.error('Login error:', errorMessage);\n      alert('ログインエラーが発生しました: ' + errorMessage);\n    } else if (error instanceof Error) {\n      console.error('Unexpected error:', error.message);\n      alert('ログインエラーが発生しました!: ' + error.message);\n    } else {\n      console.error('Unknown error:', error);\n      alert('ログインエラーが発生しました!!');\n    }\n  }\n};","map":{"version":3,"names":["axios","AxiosError","LOGIN_URL","login","email","password","response","post","username","token","data","message","error","_error$response","_error$response$data","errorMessage","detail","console","alert","Error"],"sources":["/usr/src/app/health-app/src/API/api-back.ts"],"sourcesContent":["import axios, { AxiosError } from 'axios';\n\n\n// DjangoのログインAPIエンドポイントを指定\nconst LOGIN_URL = 'http://localhost:8000/api/login/'; // DjangoのAPIエンドポイント\n\ninterface LoginResponse {\n    token?: string;\n    message?: string;\n    messageErr?: string;\n  }\n\nexport const login = async (email: string, password: string): Promise<LoginResponse> => {\n\n  try {\n    const response = await axios.post(LOGIN_URL, {\n      username: email,\n      password: password\n    });\n\n    // 成功時の処理\n    return {\n      token: response.data.token, // 例：トークンが返される場合\n      message: 'ログイン成功'\n    };\n  } catch (error) {\n    if (error instanceof AxiosError) {\n        const errorMessage = error.response?.data?.detail || 'ログイン失敗';\n        console.error('Login error:', errorMessage);\n        alert('ログインエラーが発生しました: ' + errorMessage);\n      } else if (error instanceof Error) {\n        console.error('Unexpected error:', error.message);\n        alert('ログインエラーが発生しました!: ' + error.message);\n      } else {\n        console.error('Unknown error:', error);\n        alert('ログインエラーが発生しました!!');\n      }\n  }\n};\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;;AAGzC;AACA,MAAMC,SAAS,GAAG,kCAAkC,CAAC,CAAC;;AAQtD,OAAO,MAAMC,KAAK,GAAG,MAAAA,CAAOC,KAAa,EAAEC,QAAgB,KAA6B;EAEtF,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,IAAI,CAACL,SAAS,EAAE;MAC3CM,QAAQ,EAAEJ,KAAK;MACfC,QAAQ,EAAEA;IACZ,CAAC,CAAC;;IAEF;IACA,OAAO;MACLI,KAAK,EAAEH,QAAQ,CAACI,IAAI,CAACD,KAAK;MAAE;MAC5BE,OAAO,EAAE;IACX,CAAC;EACH,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,IAAIA,KAAK,YAAYX,UAAU,EAAE;MAAA,IAAAY,eAAA,EAAAC,oBAAA;MAC7B,MAAMC,YAAY,GAAG,EAAAF,eAAA,GAAAD,KAAK,CAACN,QAAQ,cAAAO,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBH,IAAI,cAAAI,oBAAA,uBAApBA,oBAAA,CAAsBE,MAAM,KAAI,QAAQ;MAC7DC,OAAO,CAACL,KAAK,CAAC,cAAc,EAAEG,YAAY,CAAC;MAC3CG,KAAK,CAAC,kBAAkB,GAAGH,YAAY,CAAC;IAC1C,CAAC,MAAM,IAAIH,KAAK,YAAYO,KAAK,EAAE;MACjCF,OAAO,CAACL,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAACD,OAAO,CAAC;MACjDO,KAAK,CAAC,mBAAmB,GAAGN,KAAK,CAACD,OAAO,CAAC;IAC5C,CAAC,MAAM;MACLM,OAAO,CAACL,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;MACtCM,KAAK,CAAC,kBAAkB,CAAC;IAC3B;EACJ;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}