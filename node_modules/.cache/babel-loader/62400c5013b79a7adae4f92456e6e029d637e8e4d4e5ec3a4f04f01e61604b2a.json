{"ast":null,"code":"import axios from 'axios';\nimport MockAdapter from 'axios-mock-adapter';\nimport { posts, menus } from './apidata';\nconst api = axios.create({\n  baseURL: 'http://localhost:3001/'\n});\nconst mock = new MockAdapter(api);\n\n/*\nmock.onPost('/user1').reply((config) => {\n  const { email, password } = JSON.parse(config.data);\n  if (email === USER_INFO.email && password === USER_INFO.password) {\n    return [200, { token: USER_INFO.token, message:`Login success` }];\n  }else if(email !== USER_INFO.email || password !== USER_INFO.password){\n    return [200, { messageErr: 'Invalid email or password', token: null}];\n  }else{\n    return [400, { messageErr: 'exception' }];\n  }\n  \n});\n\nexport const login = async (email: string, password: string) => {\n  try {\n  const response = await api.post('/user1', { email, password });\n  return response.data;\n  } catch (error) {\n    throw new Error('login Failed');\n  }\n};*/\n\nmock.onGet('/posts').reply(200, posts);\nexport const fetchPosts = async () => {\n  try {\n    const response = await api.get('/posts');\n    return response.data;\n  } catch (error) {\n    throw new Error('Failed to fetch posts');\n  }\n};\nexport const fetchrecommend = async bmi => {\n  try {\n    const response = await api.post('/recommend', {\n      bmi\n    });\n    return response.data;\n  } catch (error) {\n    throw new Error('Menu cannot find');\n  }\n};\nmock.onPost('/recommend').reply(config => {\n  try {\n    const {\n      bmi\n    } = JSON.parse(config.data);\n    let filteredMenus = [];\n    if (bmi < 18.5) {\n      filteredMenus = menus.filter(menu => menu.calorie >= 300);\n    } else if (bmi >= 18.5 && bmi < 25) {\n      filteredMenus = menus.filter(menu => menu.calorie >= 200 && menu.calorie < 300);\n    } else {\n      filteredMenus = menus.filter(menu => menu.calorie < 200 && menu.protein >= 15);\n    }\n    return [200, filteredMenus];\n  } catch (error) {\n    throw new Error('Cannot find recommend menus');\n  }\n});","map":{"version":3,"names":["axios","MockAdapter","posts","menus","api","create","baseURL","mock","onGet","reply","fetchPosts","response","get","data","error","Error","fetchrecommend","bmi","post","onPost","config","JSON","parse","filteredMenus","filter","menu","calorie","protein"],"sources":["/usr/src/app/health-app/src/API/apidata-post.ts"],"sourcesContent":["import axios from 'axios';\nimport MockAdapter from 'axios-mock-adapter';\nimport { USER_INFO ,posts, menus} from './apidata';\n\nconst api = axios.create({\n  baseURL: 'http://localhost:3001/',\n});\n\nconst mock = new MockAdapter(api);\n\n/*\nmock.onPost('/user1').reply((config) => {\n  const { email, password } = JSON.parse(config.data);\n  if (email === USER_INFO.email && password === USER_INFO.password) {\n    return [200, { token: USER_INFO.token, message:`Login success` }];\n  }else if(email !== USER_INFO.email || password !== USER_INFO.password){\n    return [200, { messageErr: 'Invalid email or password', token: null}];\n  }else{\n    return [400, { messageErr: 'exception' }];\n  }\n  \n});\n\nexport const login = async (email: string, password: string) => {\n  try {\n  const response = await api.post('/user1', { email, password });\n  return response.data;\n  } catch (error) {\n    throw new Error('login Failed');\n  }\n};*/\n\n\nmock.onGet('/posts').reply(200, posts);\n\nexport const fetchPosts = async () => {\n  try {\n    const response = await api.get('/posts');\n    return response.data;\n  } catch (error) {\n    throw new Error('Failed to fetch posts');\n  }\n};\n\n\n\nexport const fetchrecommend = async (bmi: number) => {\n  try {\n    const response = await api.post('/recommend', { bmi });\n    return response.data;\n    } catch (error) {\n      throw new Error('Menu cannot find');\n    }\n};\n\nmock.onPost('/recommend').reply((config) => {\n  try {\n  const { bmi } = JSON.parse(config.data);\n  let filteredMenus = [];\n  if (bmi < 18.5) {\n    filteredMenus = menus.filter(menu => menu.calorie >= 300);\n  } else if (bmi >= 18.5 && bmi < 25) {\n    filteredMenus =  menus.filter(menu => menu.calorie >= 200 && menu.calorie < 300);\n  } else {\n    filteredMenus =  menus.filter(menu => menu.calorie < 200 && menu.protein >= 15);\n  }\n  return [200, filteredMenus];\n  }catch (error) {\n    throw new Error('Cannot find recommend menus');\n  }\n});\n\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,WAAW,MAAM,oBAAoB;AAC5C,SAAoBC,KAAK,EAAEC,KAAK,QAAO,WAAW;AAElD,MAAMC,GAAG,GAAGJ,KAAK,CAACK,MAAM,CAAC;EACvBC,OAAO,EAAE;AACX,CAAC,CAAC;AAEF,MAAMC,IAAI,GAAG,IAAIN,WAAW,CAACG,GAAG,CAAC;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGAG,IAAI,CAACC,KAAK,CAAC,QAAQ,CAAC,CAACC,KAAK,CAAC,GAAG,EAAEP,KAAK,CAAC;AAEtC,OAAO,MAAMQ,UAAU,GAAG,MAAAA,CAAA,KAAY;EACpC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMP,GAAG,CAACQ,GAAG,CAAC,QAAQ,CAAC;IACxC,OAAOD,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;EAC1C;AACF,CAAC;AAID,OAAO,MAAMC,cAAc,GAAG,MAAOC,GAAW,IAAK;EACnD,IAAI;IACF,MAAMN,QAAQ,GAAG,MAAMP,GAAG,CAACc,IAAI,CAAC,YAAY,EAAE;MAAED;IAAI,CAAC,CAAC;IACtD,OAAON,QAAQ,CAACE,IAAI;EACpB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,kBAAkB,CAAC;EACrC;AACJ,CAAC;AAEDR,IAAI,CAACY,MAAM,CAAC,YAAY,CAAC,CAACV,KAAK,CAAEW,MAAM,IAAK;EAC1C,IAAI;IACJ,MAAM;MAAEH;IAAI,CAAC,GAAGI,IAAI,CAACC,KAAK,CAACF,MAAM,CAACP,IAAI,CAAC;IACvC,IAAIU,aAAa,GAAG,EAAE;IACtB,IAAIN,GAAG,GAAG,IAAI,EAAE;MACdM,aAAa,GAAGpB,KAAK,CAACqB,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,OAAO,IAAI,GAAG,CAAC;IAC3D,CAAC,MAAM,IAAIT,GAAG,IAAI,IAAI,IAAIA,GAAG,GAAG,EAAE,EAAE;MAClCM,aAAa,GAAIpB,KAAK,CAACqB,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,OAAO,IAAI,GAAG,IAAID,IAAI,CAACC,OAAO,GAAG,GAAG,CAAC;IAClF,CAAC,MAAM;MACLH,aAAa,GAAIpB,KAAK,CAACqB,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,OAAO,GAAG,GAAG,IAAID,IAAI,CAACE,OAAO,IAAI,EAAE,CAAC;IACjF;IACA,OAAO,CAAC,GAAG,EAAEJ,aAAa,CAAC;EAC3B,CAAC,QAAOT,KAAK,EAAE;IACb,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;EAChD;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}