{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["/usr/src/app/health-app/src/API/apidata-post.ts"],"sourcesContent":["import axios from 'axios';\nimport MockAdapter from 'axios-mock-adapter';\nimport { USER_INFO ,posts, menus} from './apidata';\n/*\nconst api = axios.create({\n  baseURL: 'http://localhost:3001/',\n});\n\nconst mock = new MockAdapter(api);\n\n\nmock.onPost('/user1').reply((config) => {\n  const { email, password } = JSON.parse(config.data);\n  if (email === USER_INFO.email && password === USER_INFO.password) {\n    return [200, { token: USER_INFO.token, message:`Login success` }];\n  }else if(email !== USER_INFO.email || password !== USER_INFO.password){\n    return [200, { messageErr: 'Invalid email or password', token: null}];\n  }else{\n    return [400, { messageErr: 'exception' }];\n  }\n  \n});\n\nexport const login = async (email: string, password: string) => {\n  try {\n  const response = await api.post('/user1', { email, password });\n  return response.data;\n  } catch (error) {\n    throw new Error('login Failed');\n  }\n};\n\n\nmock.onGet('/posts').reply(200, posts);\n\nexport const fetchPosts = async () => {\n  try {\n    const response = await api.get('/posts');\n    return response.data;\n  } catch (error) {\n    throw new Error('Failed to fetch posts');\n  }\n};\n\n\n\nexport const fetchrecommend = async (bmi: number) => {\n  try {\n    const response = await api.post('/recommend', { bmi });\n    return response.data;\n    } catch (error) {\n      throw new Error('Menu cannot find');\n    }\n};\n\nmock.onPost('/recommend').reply((config) => {\n  try {\n  const { bmi } = JSON.parse(config.data);\n  let filteredMenus = [];\n  if (bmi < 18.5) {\n    filteredMenus = menus.filter(menu => menu.calorie >= 300);\n  } else if (bmi >= 18.5 && bmi < 25) {\n    filteredMenus =  menus.filter(menu => menu.calorie >= 200 && menu.calorie < 300);\n  } else {\n    filteredMenus =  menus.filter(menu => menu.calorie < 200 && menu.protein >= 15);\n  }\n  return [200, filteredMenus];\n  }catch (error) {\n    throw new Error('Cannot find recommend menus');\n  }\n});\n*/\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}